{"version":3,"file":"static/js/MovieDetails.65d9c50a.chunk.js","mappings":"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","sources":["components/service/movie-service.js","pages/Cast/CastItem.jsx","pages/Cast/CastList.jsx","pages/Cast/Cast.jsx","hooks/useFetchCast.jsx","pages/Reviews/ReviewsItem.jsx","pages/Reviews/ReviewsList.jsx","pages/Reviews/Reviews.jsx","hooks/useFetchReviews.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\nconst apiKEY = '0bd2f89e5997215ec06dea49692dc792';\n   \n\nexport const fetchTrendingToday = async () => {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${apiKEY}`);\n    return data.results;\n};\n  \nexport const fetchMovie = async (id) => {\n    const { data } = await axios.get(`/movie/${id}?api_key=${apiKEY}&language=en-US`);\n    return data;\n};\n  \nexport const fetchActorsMovie = async (id) => {\n    const { data } = await axios.get(`/movie/${id}/credits?api_key=${apiKEY}&language=en-US`);\n    return data;\n};\n\nexport const fetchReviewsMovie = async (id) => {\n    const { data } = await axios.get(`/movie/${id}/reviews?api_key=${apiKEY}&language=en-US&page=1`);\n    return data;\n};\n\nexport const fetchSearchMovie = async (name) => {\n    const { data } = await axios.get(`/search/movie?api_key=${apiKEY}&language=en-US&query=${name}&page=1&include_adult=false`);\n    return data;\n};","import PropTypes from 'prop-types';\n\nexport const CastItem = ({ actor }) => {\n  const { name, character, profile_path } = actor;\n\n  return (\n    <>\n      <p>Actor: {name}</p>\n      <p>Character: {character}</p>\n\n      <img\n        src={profile_path && `https://image.tmdb.org/t/p/w500${profile_path}`}\n        alt={name}\n        width=\"150px\"\n      />\n    </>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n  profile_path: PropTypes.string,\n};\n","import { CastItem } from './CastItem';\n\nexport const CastList = ({ actors }) => {\n  if (!actors) {\n    return;\n  }\n  return (\n    actors && actors.map(actor => <CastItem actor={actor} key={actor.id} />)\n  );\n};\n","import { useFetchCast } from 'hooks/useFetchCast';\nimport { CastList } from './CastList';\n\nconst Cast = () => {\n  const actors = useFetchCast();\n\n  return (\n    <div>\n      <CastList actors={actors} />\n    </div>\n  );\n};\nexport default Cast;\n","import { fetchActorsMovie } from 'components/service/movie-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchCast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const getActors = async () => {\n      try {\n        const data = fetchActorsMovie(movieId);\n        data.then(res => setActors(res.cast));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    getActors();\n  }, [movieId]);\n  return actors;\n};\n","import PropTypes from 'prop-types';\n\nexport const ReviewsItem = ({ review }) => {\n  const { author, content } = review;\n\n  return (\n    <>\n      <p>Author: {author}</p>\n      <p>{content}</p>\n    </>\n  );\n};\n\nReviewsItem.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string,\n};\n","import { ReviewsItem } from './ReviewsItem';\n\nexport const ReviewsList = ({ reviews }) => {\n  if (!reviews) {\n    return;\n  }\n  return (\n    reviews &&\n    reviews.map(review => <ReviewsItem review={review} key={review.id} />)\n  );\n};\n","import { useFetchReviews } from 'hooks/useFetchReviews';\nimport { ReviewsList } from './ReviewsList';\n\nconst Reviews = () => {\n  const reviews = useFetchReviews();\n  return (\n    <div>\n      {reviews.length ? (\n        <ReviewsList reviews={reviews} />\n      ) : (\n        \"We don't have any reviews for this movie\"\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","import { fetchReviewsMovie } from 'components/service/movie-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const getReviews = async () => {\n      try {\n        const data = fetchReviewsMovie(movieId);\n        data.then(res => setReviews(res.results));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getReviews();\n  }, [movieId]);\n  return reviews;\n};\n"],"names":["axios","apiKEY","fetchTrendingToday","data","results","fetchMovie","id","fetchActorsMovie","fetchReviewsMovie","fetchSearchMovie","name","CastItem","actor","character","profile_path","src","alt","width","CastList","actors","map","useState","setActors","movieId","useParams","useEffect","getActors","then","res","cast","error","console","useFetchCast","ReviewsItem","review","author","content","ReviewsList","reviews","setReviews","getReviews","useFetchReviews","length"],"sourceRoot":""}